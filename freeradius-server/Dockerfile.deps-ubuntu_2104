#
#	Author: Jorge Pereira <jpereira@freeradius.org>
#   Desc: Freeradius Development Box
#
FROM ubuntu:21.04

LABEL maintainer "Jorge Pereira <jpereira@freeradius.org>"

ARG osname=hirsute
ARG gccver=11
ARG clangver=11

ARG DEBIAN_FRONTEND=noninteractive
ENV CC=clang

#
#   Disable apt-get over ipv6
#
RUN echo 'Acquire::ForceIPv4 "true";' | tee /etc/apt/apt.conf.d/99force-ipv4

#
#  Install add-apt-repository
#
RUN sed 's/archive.ubuntu.com/br.archive.ubuntu.com/g' -i /etc/apt/sources.list
RUN apt-get update && \
    apt-get install -y software-properties-common aptitude apt-utils && \
    apt-get clean && \
    rm -r /var/lib/apt/lists/*

#
#   Update
#
RUN apt-get update

#
#   Utilities
#
RUN apt-get install -y snmp snmpd dialog telnet netcat iproute2 ldap-utils

#
#   Radsec dependencies
#
RUN apt-get install -y nettle-dev

#
#   Development utilities
#
RUN apt-get install -y cmake devscripts equivs git git-lfs quilt build-essential moreutils \
			google-perftools libgoogle-perftools-dev \
			libcollectdclient-dev \
			libosmo-sccp-dev \
			libunbound-dev \
			libidn11-dev libidn11-dev firebird-dev xutils-dev \
			libosmo-abis-dev libosmo-fl2k-dev libosmo-mgcp-client-dev libosmo-netif-dev \
			libosmo-ranap-dev libosmo-sccp-dev libosmo-sigtran-dev libosmocore-dev libosmosdr-dev

#
#	Pam for pam_auth.git
#
RUN apt-get install -y libpam0g-dev libpcap-dev libjson-perl libcap-dev libcap-ng-dev \
			libgdbm-dev libjson-c-dev libmemcached-dev libkrb5-dev libwbclient-dev libwbclient-sssd-dev \
			libmysqlclient-dev libsqlite3-dev libykclient-dev libmongoc-dev libmongoclient-dev libctl-dev \
			libperl-dev libpython3-all-dev libldap2-dev libpq-dev libhiredis-dev libcurl4-openssl-dev \
			python3-binary-memcached libodbc1

#
#
#   eapol_test dependencies
#
RUN apt-get install -y libnl-3-dev libnl-genl-3-dev

#
#   Install the radsecproxy
#
RUN apt-get install -y radsecproxy

#
# 	Fix locale
#
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y locales apt-utils

RUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && \
    dpkg-reconfigure --frontend=noninteractive locales && \
    update-locale LANG=en_US.UTF-8

ENV LANG en_US.UTF-8 

#
#	Usual commands.
#
RUN apt-get install -y screen vim wget ssl-cert gdb manpages-dev strace valgrind sysdig \
                        psmisc htop openssh-server tcpdump net-tools sysvbanner \
                        iputils-ping sudo lsof extrace sshpass

#
#	Heaptrack tool + misc
#
RUN apt-get install -y heaptrack heaptrack-gui meld gnome-icon-theme

#
#  Documentation build dependecies
#

#  - doxygen & JSON.pm
RUN apt-get install -y doxygen graphviz libjson-perl
#  - antora (npm needed)
#RUN curl -sL https://deb.nodesource.com/setup_12.x | bash -
#RUN apt-get install -y nodejs npm
RUN apt-get install -y npm
RUN npm i -g @antora/cli@2.1 @antora/site-generator-default@2.1
#  - pandoc
WORKDIR /tmp
RUN curl -OL $(curl -s https://api.github.com/repos/jgm/pandoc/releases/latest | grep "browser_download_url.*amd64.*deb" | cut -d '"' -f 4)
RUN apt-get install -f -y /tmp/pandoc-*.deb
#  - asciidoctor
RUN apt-get install -y ruby-dev
RUN gem install asciidoctor

#
#
#	Clang (compiler)
#
RUN wget -4 -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
RUN echo "# Created at $(date)" > /etc/apt/sources.list.d/llvm${clangver}-org.list
RUN echo "deb http://apt.llvm.org/${osname}/ llvm-toolchain-${osname} main" >> /etc/apt/sources.list.d/llvm${clangver}-org.list
RUN echo "deb-src http://apt.llvm.org/${osname}/ llvm-toolchain-${osname} main" >> /etc/apt/sources.list.d/llvm${clangver}-org.list

# Update
RUN apt-get update
# LLVM
RUN apt-get install -y libllvm-${clangver}-ocaml-dev libllvm${clangver} llvm-${clangver} llvm-${clangver}-dev llvm-${clangver}-doc llvm-${clangver}-examples llvm-${clangver}-runtime
# Clang and co
RUN apt-get install -y clang-${clangver} clang-tools-${clangver} clang-${clangver}-doc libclang-common-${clangver}-dev libclang-${clangver}-dev libclang1-${clangver} clang-format-${clangver}
# libfuzzer
RUN apt-get install -y libfuzzer-${clangver}-dev
# lldb
RUN apt-get install -y lldb-${clangver}
# lld (linker)
RUN apt-get install -y lld-${clangver}
# libc++
RUN apt-get install -y libc++-${clangver}-dev libc++abi-${clangver}-dev
# OpenMP
RUN apt-get install -y libomp-${clangver}-dev

#
#   clang: Hack to fix the mess.
#
RUN update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${clangver} 1000
RUN update-alternatives --install /usr/bin/llvm-symbolizer llvm-symbolizer /usr/bin/llvm-symbolizer-${clangver} 1000
RUN update-alternatives --install /bin/lldb lldb /bin/lldb-${clangver} 1000
RUN ln -fs /lib/x86_64-linux-gnu/libgcc_s.so.1 /lib64/libgcc_s.so.1

#
#   Voltron debug env
#
RUN apt-get install -y python3-pip
RUN pip3 install voltron

#
#	CouchBase
#
RUN wget -4 -O - http://packages.couchbase.com/ubuntu/couchbase.key | apt-key add -
RUN echo "deb http://packages.couchbase.com/ubuntu bionic bionic/main" | tee /etc/apt/sources.list.d/couchbase.list
RUN apt-get update
RUN aptitude install -y libcouchbase-dev libcouchbase2-bin

#
#	Luajit
#
RUN mkdir -p /tmp/luajit
WORKDIR /tmp/luajit
RUN for i in http://mirrors.edge.kernel.org/ubuntu/pool/universe/l/luajit/libluajit-5.1-2_2.0.4%2Bdfsg-1_amd64.deb \
	http://mirrors.edge.kernel.org/ubuntu/pool/universe/l/luajit/libluajit-5.1-common_2.0.4%2Bdfsg-1_all.deb \
	http://mirrors.edge.kernel.org/ubuntu/pool/universe/l/luajit/libluajit-5.1-dev_2.0.4%2Bdfsg-1_amd64.deb \
	http://mirrors.edge.kernel.org/ubuntu/pool/universe/l/luajit/luajit_2.0.4%2Bdfsg-1_amd64.deb; do wget -4 $i; done
RUN dpkg -i /tmp/luajit/*.deb
#
#  Setup a src dir in /usr/local
#
RUN mkdir -p /opt/src
WORKDIR /opt/src

#
#  Get a modern version of cmake.  We need 3.8.2 or later to build libkqueue rpms
#
#RUN curl -f -o cmake.sh https://cmake.org/files/v3.8/cmake-3.8.2-Linux-x86_64.sh
#RUN [ "$(cat cmake.sh | openssl sha256 | sed 's/^.* //')" = "bb26b1871f9e5c2fb73476186cc94d03b674608f704b48b94d617340b87b4d73" ]
#RUN sh cmake.sh --skip-license --prefix=/usr/local

#
#  Grab libkqueue and build
#
WORKDIR /opt/src
RUN git clone --branch master --depth=1 https://github.com/mheily/libkqueue.git

WORKDIR libkqueue
RUN cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib ./ && \
    make && \
    cpack -G DEB && \
    dpkg -i --force-all ./libkqueue*.deb

#
#  Grab & Install OpenSSL 3.0x in /opt/openssl
#
ENV OPENSSL_VERSION=3.0.1

WORKDIR /opt/src
RUN wget https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz
RUN tar xzf openssl-${OPENSSL_VERSION}.tar.gz
WORKDIR openssl-${OPENSSL_VERSION}
RUN ./Configure --prefix=/opt/openssl --openssldir=.
RUN make -j `nproc` && make install

#
#
#  Shallow clone the FreeRADIUS source
#
WORKDIR /opt/src
ARG source=https://github.com/FreeRADIUS/freeradius-server.git
RUN git clone --depth 1 --no-single-branch ${source}
#RUN git clone ${source}

#
#   We want the 'man pages'
#
# Do not exclude man pages & other documentation
RUN rm -f /etc/dpkg/dpkg.cfg.d/excludes
RUN yes | unminimize

#
#	TACACS+ PAM stuff
#
RUN apt install -y pamtester libpam-tacplus

#
#	TACACS+ Server
#
#RUN apt install -y flex bison libwrap0-dev
#RUN mkdir -p /etc/tacacs+
#RUN git clone https://github.com/jpereira/tacacs_plus /opt/src/tacacs_plus.git
#WORKDIR /opt/src/tacacs_plus.git
#RUN ./configure --prefix=/usr/local && make && make install
#
#COPY etc/tacacs+/tac_plus.conf /etc/tacacs+/tac_plus.conf
#COPY etc/pam.d/test /etc/pam.d/test

#
#	TACACS+ Plus
#
RUN pip3 install tacacs_plus

#
#	Extra services
#
RUN apt-get install -y syslog-ng

#
#   Update
#
RUN apt-get update; true

#
#   Dist-upgrade
#
RUN apt-get -y dist-upgrade

#
#   Jorge's dotfiles
#
# Persist envs
WORKDIR /root
RUN git clone https://github.com/jpereira/dotfiles/ dotfiles.git
WORKDIR dotfiles.git
RUN ./install.sh run

#
#	Fix /etc/hosts
#
#RUN sed '/^127.*localhost/s/$/ devbox-freeradius-server-ubuntu_2104/g' /etc/hosts 

#
#   Copy the things
#
RUN mkdir -p /opt/local/bin
COPY bin/* /usr/local/bin/

#
#   Profile scripts
#
COPY etc/bin2path.sh /etc/profile.d
COPY etc/securetty /etc/securetty

#
#  Install build dependencies for all branches from v3 onwards
#
ARG APT_OPTS="-y --option=Dpkg::options::=--force-unsafe-io --no-install-recommends"

#WORKDIR freeradius-server
#RUN for i in $(git for-each-ref --format='%(refname:short)' refs/remotes/origin 2>/dev/null | sed -e 's#origin/##' | egrep "^(v[3-9]*\.[0-9x]*\.x|master)$");\
#	do \
#		git checkout $i; \
#		if [ -e ./debian/control.in ] ; then debian/rules debian/control ; fi ; echo 'y' | mk-build-deps -irt'apt-get -yV' debian/control ; \
#	done

#
#	Add ubuntu user
#
RUN groupadd ubuntu && \
	useradd -rm -d /home/ubuntu -s /bin/bash -g ubuntu -p "$(openssl passwd -1 ubuntu)" ubuntu

#
#  Another volume
#
VOLUME ["/sandbox"]

#
#   Default HOME
#
WORKDIR /root/Devel

#
#   Usual ports auth/accounting/coa
#
EXPOSE 1812/udp 1812/tcp 1813/udp 1813/tcp 3799/udp
